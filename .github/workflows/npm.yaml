name: hello

on:
  push:

jobs:
  install:
    name: install
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: npm

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node packages
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('npm/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: |
          npm list

      # Because it restores ~/.npm, it always needs `npm ci` to recover ./node-modules.
      # Instead, we can cache `node-modules` directly. See: https://zenn.dev/odan/scraps/81b2738864a908
      - run: npm ci

      - name: Cache build
        uses: actions/cache@v3
        id: cache-next
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/npm/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-




  build:
    name: build
    runs-on: ubuntu-latest
    needs: [install]
    defaults:
      run:
        working-directory: npm

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node packages
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('npm/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Because it restores ~/.npm, it always needs `npm ci` to recover ./node-modules.
      # Instead, we can cache `node-modules` directly. See: 
      - run: npm ci

      - if: ${{ steps.cache-next.outputs.cache-hit != 'true' }}
        name: Build
        run: npm run build

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [install]
    defaults:
      run:
        working-directory: npm

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node packages
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('npm/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Because it restores ~/.npm, it always needs `npm ci` to recover ./node-modules.
      # Instead, we can cache `node-modules` directly. See: 
      - run: npm ci

      - name: Lint
        run: npm run lint
