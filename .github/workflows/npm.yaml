name: hello

on:
  push:

jobs:
  my_first_job:
    name: My first job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: npm

    steps:
      - uses: actions/checkout@v3

      - name: Cache Gradle packages
        uses: actions/cache@v3
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('npm/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - run: npm ci

      - name: Cache build
        uses: actions/cache@v3
        id: next-cache
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - if: ${{ steps.cache-next.outputs.cache-hit != 'true' }}
        name: Skip building
        run: "echo Chach hit"

      - if: ${{ steps.cache-next.outputs.cache-hit = 'true' }}
        name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

  # my_second_job:
  #   name: My second job
  #   runs-on: ubuntu-latest
