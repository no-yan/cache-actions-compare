name: yarn3

on:
  push:
    paths:
      - 'yarn/**'
      - '.github/**/*yarn*/**'

jobs:
  install:
    name: install
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: yarn3

    steps:
      - uses: actions/checkout@v3

      - run: yarn

      - name: Cache build
        uses: actions/cache@v3
        id: cache-next
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/yarn3/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-




  build:
    name: build
    runs-on: ubuntu-latest
    needs: [install]
    defaults:
      run:
        working-directory: yarn3

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node packages
        uses: ./.github/compose/cache-yarn

      - if: ${{ steps.cache-next.outputs.cache-hit != 'true' }}
        name: Build
        run: yarn build

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: [install]
    defaults:
      run:
        working-directory: yarn3

    steps:
      - uses: actions/checkout@v3

      - name: Cache Node packages
        uses: ./.github/compose/cache-yarn

      - name: Lint
        run: yarn lint
